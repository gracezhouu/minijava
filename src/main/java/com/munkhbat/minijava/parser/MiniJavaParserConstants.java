/* Generated By:JavaCC: Do not edit this line. MiniJavaParserConstants.java */
package com.munkhbat.minijava.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniJavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACES = 1;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 4;
  /** RegularExpression Id. */
  int LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int CLASS = 6;
  /** RegularExpression Id. */
  int LBRACE = 7;
  /** RegularExpression Id. */
  int PUBLIC = 8;
  /** RegularExpression Id. */
  int STATIC = 9;
  /** RegularExpression Id. */
  int VOID = 10;
  /** RegularExpression Id. */
  int MAIN = 11;
  /** RegularExpression Id. */
  int LPAREN = 12;
  /** RegularExpression Id. */
  int STRING = 13;
  /** RegularExpression Id. */
  int LBRACK = 14;
  /** RegularExpression Id. */
  int RBRACK = 15;
  /** RegularExpression Id. */
  int RPAREN = 16;
  /** RegularExpression Id. */
  int RBRACE = 17;
  /** RegularExpression Id. */
  int EXTENDS = 18;
  /** RegularExpression Id. */
  int SEMICOLON = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int COMMA = 21;
  /** RegularExpression Id. */
  int INT = 22;
  /** RegularExpression Id. */
  int BOOLEAN = 23;
  /** RegularExpression Id. */
  int ASSIGN = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int PRINT = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int TIMES = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int LENGTH = 35;
  /** RegularExpression Id. */
  int TRUE = 36;
  /** RegularExpression Id. */
  int FALSE = 37;
  /** RegularExpression Id. */
  int THIS = 38;
  /** RegularExpression Id. */
  int NEW = 39;
  /** RegularExpression Id. */
  int EXCLAMATION = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 42;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_BLOCK_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACES>",
    "\"/*\"",
    "<token of kind 3>",
    "\"*/\"",
    "<LINE_COMMENT>",
    "\"class\"",
    "\"{\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"(\"",
    "\"String\"",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "\"}\"",
    "\"extends\"",
    "\";\"",
    "\"return\"",
    "\",\"",
    "\"int\"",
    "\"boolean\"",
    "\"=\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"System.out.println\"",
    "\"&&\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\".\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<INTEGER_LITERAL>",
  };

}
