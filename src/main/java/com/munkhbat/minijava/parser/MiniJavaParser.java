/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package com.munkhbat.minijava.parser;

import com.munkhbat.minijava.ast.*;
import com.munkhbat.minijava.visitor.*;

public class MiniJavaParser implements MiniJavaParserConstants {

/** * Grammar */
  final public Program Program() throws ParseException {
  MainClass mainClass;
  ClassDeclList classDeclList;
    mainClass = MainClass();
    classDeclList = ClassDeclL();
    {if (true) return new Program(mainClass, classDeclList);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
  Statement s;
  Token t1, t2;
    jj_consume_token(CLASS);
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACK);
    jj_consume_token(RBRACK);
    t2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
    {if (true) return new MainClass(new Identifier(t1.image), new Identifier(t2.image), s);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclList ClassDeclL() throws ParseException {
  ClassDeclList classDeclList;
  ClassDecl classDecl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      classDecl = ClassDecl();
      classDeclList = ClassDeclL();
    classDeclList.addElement(classDecl);
    {if (true) return classDeclList;}
      break;
    default:
      jj_la1[0] = jj_gen;
  {if (true) return new ClassDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDecl() throws ParseException {
  VarDeclList varDeclList, varDeclList1;
  MethodDeclList methodDeclList, methodDeclList1;
  Token t, t1;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      varDeclList = VarDeclL();
      methodDeclList = MethodDeclL();
      jj_consume_token(RBRACE);
      {if (true) return new ClassDeclSimple(new Identifier(t.image), varDeclList, methodDeclList);}
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      t1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      varDeclList1 = VarDeclL();
      methodDeclList1 = MethodDeclL();
      jj_consume_token(RBRACE);
    {if (true) return new ClassDeclExtends(new Identifier(t.image), new Identifier(t1.image), varDeclList1, methodDeclList1);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDecl() throws ParseException {
  Type typ;
  Token t;
    typ = Type();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    {if (true) return new VarDecl(typ, new Identifier(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclList VarDeclL() throws ParseException {
  VarDeclList varDeclList;
  VarDecl varDecl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:
      varDecl = VarDecl();
      varDeclList = VarDeclL();
    varDeclList.addElement(varDecl);
    {if (true) return varDeclList;}
      break;
    default:
      jj_la1[2] = jj_gen;
  {if (true) return new VarDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclList MethodDeclL() throws ParseException {
  MethodDeclList methodDeclList;
  MethodDecl medthodDecl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      medthodDecl = MethodDecl();
      methodDeclList = MethodDeclL();
    methodDeclList.addElement(medthodDecl);
    {if (true) return methodDeclList;}
      break;
    default:
      jj_la1[3] = jj_gen;
  {if (true) return new MethodDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDecl() throws ParseException {
  Type typ;
  Token t;
  FormalList formalList;
  VarDeclList varDeclList = new VarDeclList();
  VarDecl varDecl;
  StatementList statementList = new StatementList();
  Statement s;
  Exp exp;
    jj_consume_token(PUBLIC);
    typ = Type();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    formalList = FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      varDecl = VarDecl();
      varDeclList.addElement(varDecl);
    }
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      s = Statement();
      statementList.addElement(s);
    }
    jj_consume_token(RETURN);
    exp = Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
    {if (true) return new MethodDecl(typ, new Identifier(t.image), formalList,
     varDeclList, statementList, exp);}
    throw new Error("Missing return statement in function");
  }

  final public FormalList FormalList() throws ParseException {
  Type typ;
  FormalList formalList = new FormalList();
  Formal formal, formal1;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:
      typ = Type();
      t = jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        formal = FormalRest();
        formalList.addElement(formal);
      }
    formal1 = new Formal(typ, new Identifier(t.image));
    formalList.addElement(formal1);
    {if (true) return formalList;}
      break;
    default:
      jj_la1[5] = jj_gen;
  {if (true) return new FormalList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Formal FormalRest() throws ParseException {
  Type typ;
  Token t;
    jj_consume_token(COMMA);
    typ = Type();
    t = jj_consume_token(IDENTIFIER);
    {if (true) return new Formal(typ, new Identifier(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
  Token t;
    if (jj_2_3(2)) {
      jj_consume_token(INT);
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
    {if (true) return new IntArrayType();}
    } else if (jj_2_4(2)) {
      jj_consume_token(INT);
  {if (true) return new IntegerType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
  {if (true) return new BooleanType();}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
  {if (true) return new IdentifierType(t.image);}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        Statement s1, s2, s3, sPrime;
        StatementList sl1;
        Exp e1, e2, e3, e4, e5, e6, e7;
        Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      sl1 = Block();
      jj_consume_token(RBRACE);
    {if (true) return new Block(sl1);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
  {if (true) return new If(e1, s1, s2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      e2 = Exp();
      jj_consume_token(RPAREN);
      s3 = Statement();
  {if (true) return new While(e2, s3);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      e4 = Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
  {if (true) return new Print(e4);}
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        e5 = Exp();
        jj_consume_token(SEMICOLON);
    {if (true) return new Assign (new Identifier(t1.image), e5);}
        break;
      case LBRACK:
        jj_consume_token(LBRACK);
        e6 = Exp();
        jj_consume_token(RBRACK);
        jj_consume_token(ASSIGN);
        e7 = Exp();
        jj_consume_token(SEMICOLON);
  {if (true) return new ArrayAssign(new Identifier(t1.image), e6, e7);}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementList Block() throws ParseException {
  StatementList sl = new StatementList();
  Statement s;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      s = Statement();
            sl.addElement(s);
    }
          {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

//  final public Exp Exp() throws ParseException {
  Exp e1, e2;
    e1 = expTerm();
    e2 = ExpRecursive(e1);
    {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp expTerm() throws ParseException {
  Token t, t1, t2;
  Exp e, e1, e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
    {if (true) return new IntegerLiteral(Integer.parseInt(t.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
  {if (true) return new True();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
  {if (true) return new False();}
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
  {
    {if (true) return new IdentifierExp(t1.image);}
  }
      break;
    case THIS:
      jj_consume_token(THIS);
  {if (true) return new This();}
      break;
    case NEW:
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        jj_consume_token(LBRACK);
        e = Exp();
        jj_consume_token(RBRACK);
    {if (true) return new NewArray(e);}
        break;
      case IDENTIFIER:
        t2 = jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
  {if (true) return new NewObject(new Identifier(t2.image));}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case EXCLAMATION:
      jj_consume_token(EXCLAMATION);
      e1 = Exp();
  {if (true) return new Not(e1);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      e2 = Exp();
      jj_consume_token(RPAREN);
  {if (true) return e2;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp ExpRecursive(Exp e1) throws ParseException {
  Exp e11, e2, e3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      e11 = Exp();
      jj_consume_token(RBRACK);
    {if (true) return new ArrayLookup(e1, e11);}
      break;
    case DOT:
      jj_consume_token(DOT);
      e2 = ExpMethodCallLength(e1);
  {if (true) return e2;}
      break;
    case AND:
    case LT:
    case PLUS:
    case MINUS:
    case TIMES:
      e3 = BinOpExp(e1);
 {if (true) return e3;}
      break;
    default:
      jj_la1[12] = jj_gen;
  {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp ExpMethodCallLength(Exp e) throws ParseException {
  Token t;
ExpList expList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      jj_consume_token(LENGTH);
    {if (true) return new ArrayLength(e);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      expList = ExpList();
      jj_consume_token(RPAREN);
  {if (true) return new Call(e, new Identifier(t.image), expList);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp BinOpExp(Exp e1) throws ParseException {
  Exp e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      e2 = Exp();
    {if (true) return new And(e1, e2);}
      break;
    case LT:
      jj_consume_token(LT);
      e2 = Exp();
  {if (true) return new LessThan(e1, e2);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      e2 = Exp();
  {if (true) return new Plus(e1, e2);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      e2 = Exp();
  {if (true) return new Minus(e1, e2);}
      break;
    case TIMES:
      jj_consume_token(TIMES);
      e2 = Exp();
  {if (true) return new Times(e1, e2);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpList ExpList() throws ParseException {
  Exp e;
  ExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case EXCLAMATION:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      e = Exp();
      el = ExpList2();
    el.addElement(e);
    {if (true) return el;}
      break;
    default:
      jj_la1[15] = jj_gen;
  {if (true) return new ExpList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpList ExpList2() throws ParseException {
  Exp exp;
  ExpList eList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      exp = ExpRight();
      eList = ExpList2();
    eList.addElement(exp);
    {if (true) return eList;}
      break;
    default:
      jj_la1[16] = jj_gen;
  {if (true) return new ExpList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp ExpRight() throws ParseException {
  Exp exp;
    jj_consume_token(COMMA);
    exp = Exp();
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x40080,0xc00000,0x100,0x200000,0xc00000,0x800000,0x1004000,0x1a000080,0x1a000080,0x400000,0x1000,0xe0004000,0x0,0xe0000000,0x1000,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x200,0x0,0x0,0x200,0x200,0x0,0x200,0x200,0x200,0x7f0,0x7,0x208,0x3,0x7f0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                             }
